{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        // eslint-disable-next-line no-console\n        console.log(initialState);\n        this.state = initialState;\n        this.score = 0;\n    }\n    moveLeft() {}\n    moveRight() {}\n    moveUp() {}\n    moveDown() {}\n    /**\n   * @returns {number}\n   */ getScore() {}\n    /**\n   * @returns {number[][]}\n   */ getState() {}\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {}\n    /**\n   * Starts the game.\n   */ start() {}\n    /**\n   * Resets the game.\n   */ restart() {}\n    // Add your own methods here\n    getRandomNumber() {}\n    addNumber() {}\n    canMove() {}\n    getEmptyCells() {}\n    fillCells() {}\n    moveUtil() {}\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-container p:nth-child(3)\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-container p:nth-child(2)\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-container p:nth-child(1)\");\n// Write your code here\n$a5fd07fa01589658$exports.prototype.getState = function() {\n    // eslint-disable-next-line no-console\n    console.log(this.state);\n    return this.state;\n};\n$a5fd07fa01589658$exports.prototype.getScore = function() {\n    return this.score;\n};\n$a5fd07fa01589658$exports.prototype.getStatus = function() {\n    if (this.state === $a5fd07fa01589658$exports.prototype.initialState) return \"idle\";\n    this.state.forEach((line)=>{\n        if (line.includes(2048)) return \"win\";\n    });\n    if (!this.canMerge() && this.getEmptyCells().length === 0) return \"lose\";\n    return \"playing\";\n};\n$a5fd07fa01589658$exports.prototype.moveLeft = function() {\n    let wasMerged = false;\n    const canMove = [\n        true,\n        true,\n        true,\n        true\n    ];\n    for(let i = 0; i < this.state.length; i++){\n        const rowCopy = [\n            ...this.state[i]\n        ];\n        let row = this.state[i].filter((num)=>num !== 0);\n        for(let j = 0; j < row.length - 1; j++)if (row[j] === row[j + 1]) {\n            row[j] *= 2;\n            row[j + 1] = 0;\n            this.score += row[j];\n            wasMerged = true;\n        }\n        row = row.filter((num)=>num !== 0);\n        while(row.length < this.state[i].length)row.push(0);\n        if (row.every((value, index, array)=>value === rowCopy[index])) canMove[i] = false;\n        this.state[i] = row;\n    }\n    if (wasMerged || canMove.includes(true)) {\n        this.addNumber();\n        this.getState();\n    }\n    this.moveUtil();\n};\n$a5fd07fa01589658$exports.prototype.moveRight = function() {\n    let wasMerged = false;\n    const canMove = [\n        true,\n        true,\n        true,\n        true\n    ];\n    for(let i = 0; i < this.state.length; i++){\n        const rowCopy = [\n            ...this.state[i]\n        ];\n        let row = this.state[i].filter((num)=>num !== 0);\n        for(let j = row.length - 1; j > 0; j--)if (row[j] === row[j - 1]) {\n            row[j] *= 2;\n            row[j - 1] = 0;\n            wasMerged = true;\n            this.score += row[j];\n        }\n        row = row.filter((num)=>num !== 0);\n        while(row.length < this.state[i].length)row.unshift(0);\n        if (row.every((value, index, array)=>value === rowCopy[index])) canMove[i] = false;\n        this.state[i] = row;\n    }\n    if (wasMerged || canMove.includes(true)) {\n        this.addNumber();\n        this.getState();\n    }\n    this.moveUtil();\n};\n$a5fd07fa01589658$exports.prototype.moveUp = function() {\n    let wasMerged = false;\n    const canMove = [\n        true,\n        true,\n        true,\n        true\n    ];\n    for(let j = 0; j < this.state.length; j++){\n        let column = [];\n        for(let i = 0; i < this.state.length; i++)column.push(this.state[i][j]);\n        const columnCopy = [\n            ...column\n        ];\n        column = column.filter((num)=>num !== 0);\n        for(let i = 0; i < column.length - 1; i++)if (column[i] === column[i + 1]) {\n            column[i] *= 2;\n            column[i + 1] = 0;\n            this.score += column[i];\n            wasMerged = true;\n        }\n        column = column.filter((num)=>num !== 0);\n        while(column.length < this.state.length)column.push(0);\n        if (column.every((value, index, array)=>value === columnCopy[index])) canMove[j] = false;\n        for(let i = 0; i < this.state.length; i++)this.state[i][j] = column[i];\n    }\n    if (wasMerged || canMove.includes(true)) {\n        this.addNumber();\n        this.getState();\n    }\n    this.moveUtil();\n};\n$a5fd07fa01589658$exports.prototype.moveDown = function() {\n    let wasMerged = false;\n    const canMove = [\n        true,\n        true,\n        true,\n        true\n    ];\n    for(let j = 0; j < this.state.length; j++){\n        let column = [];\n        for(let i = 0; i < this.state.length; i++)column.push(this.state[i][j]);\n        const columnCopy = [\n            ...column\n        ];\n        column = column.filter((num)=>num !== 0);\n        for(let i = column.length - 1; i > 0; i--)if (column[i] === column[i - 1]) {\n            column[i] *= 2;\n            column[i - 1] = 0;\n            wasMerged = true;\n            this.score += column[i];\n        }\n        column = column.filter((num)=>num !== 0);\n        while(column.length < this.state.length)column.unshift(0);\n        if (column.every((value, index)=>value === columnCopy[index])) canMove[j] = false;\n        for(let i = 0; i < this.state.length; i++)this.state[i][j] = column[i] || 0;\n    }\n    if (wasMerged || canMove.includes(true)) {\n        this.addNumber();\n        this.getState();\n    }\n    this.moveUtil();\n};\n$a5fd07fa01589658$exports.prototype.restart = function() {\n    this.state = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    $09e991522ca7e64e$var$startButton.className = \"button start\";\n    $09e991522ca7e64e$var$startButton.innerHTML = \"Start\";\n    this.score = 0;\n    $09e991522ca7e64e$var$score.innerHTML = this.score;\n    this.fillCells();\n    $09e991522ca7e64e$var$messageStart.className = \"message message-start\";\n    $09e991522ca7e64e$var$messageWin.className = \"message message-win hidden\";\n    $09e991522ca7e64e$var$messageLose.className = \"message message-lose hidden\";\n};\n$a5fd07fa01589658$exports.prototype.getRandomNumber = function() {\n    const randomNumbersPool = [\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        4\n    ];\n    const randomNumIndex = Math.floor(Math.random() * 10);\n    return randomNumbersPool[randomNumIndex];\n};\n$a5fd07fa01589658$exports.prototype.addNumber = function() {\n    if (this.getEmptyCells().length !== 0) {\n        const emptyCellsPool = this.getEmptyCells();\n        const randomCellIndex = Math.floor(Math.random() * emptyCellsPool.length);\n        const randomEmptyCell = emptyCellsPool[randomCellIndex];\n        this.state[randomEmptyCell[0]][randomEmptyCell[1]] = this.getRandomNumber();\n    }\n};\n$a5fd07fa01589658$exports.prototype.canMerge = function() {\n    for(let i = 0; i < this.state.length; i++)for(let j = 0; j < this.state.length; j++){\n        if (j < this.state.length - 1 && this.state[i][j] === this.state[i][j + 1]) return true;\n        if (i < this.state.length - 1 && this.state[i][j] === this.state[i + 1][j]) return true;\n    }\n    return false;\n};\n$a5fd07fa01589658$exports.prototype.getEmptyCells = function() {\n    const emptyCellsArray = [];\n    for(let i = 0; i < this.state.length; i++){\n        for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) emptyCellsArray.push([\n            i,\n            j\n        ]);\n    }\n    return emptyCellsArray;\n};\n$a5fd07fa01589658$exports.prototype.start = function() {\n    if (this.getEmptyCells().length === this.state.length ** 2) {\n        this.addNumber();\n        this.addNumber();\n        this.fillCells();\n        this.getState();\n        $09e991522ca7e64e$var$messageStart.className = \"message message-start hidden\";\n    }\n};\n$a5fd07fa01589658$exports.prototype.fillCells = function() {\n    const table = document.querySelector(\".game-field\");\n    const tableCells = table.querySelectorAll(\".field-cell\");\n    for(let i = 0; i < this.state.length; i++)for(let j = 0; j < this.state[i].length; j++){\n        const cellndex = i * 4 + j;\n        if (this.state[i][j] === 0) {\n            tableCells[cellndex].className = \"field-cell\";\n            tableCells[cellndex].innerHTML = \"\";\n        }\n        if (this.state[i][j] !== 0) {\n            tableCells[cellndex].className = `field-cell field-cell--${this.state[i][j]}`;\n            tableCells[cellndex].innerHTML = this.state[i][j];\n        }\n    }\n};\n$a5fd07fa01589658$exports.prototype.toggleButton = function() {\n    if (this.getStatus() === \"idle\") {\n        $09e991522ca7e64e$var$startButton.className = \"button start\";\n        $09e991522ca7e64e$var$startButton.innerHTML = \"Start\";\n    } else if (this.getEmptyCells().length !== this.state.length ** 2) {\n        $09e991522ca7e64e$var$startButton.className = \"button restart\";\n        $09e991522ca7e64e$var$startButton.innerHTML = \"Restart\";\n    }\n};\n$a5fd07fa01589658$exports.prototype.moveUtil = function() {\n    this.toggleButton();\n    this.fillCells();\n    $09e991522ca7e64e$var$score.innerHTML = this.score;\n    if (this.getStatus() === \"win\") $09e991522ca7e64e$var$messageWin.className = \"message message-win\";\n    if (this.getStatus() === \"lose\") $09e991522ca7e64e$var$messageLose.className = \"message message-lose\";\n};\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startButton.className === \"button start\") $09e991522ca7e64e$var$game.start();\n    if ($09e991522ca7e64e$var$startButton.className === \"button restart\") $09e991522ca7e64e$var$game.restart();\n});\nwindow.addEventListener(\"keydown\", $09e991522ca7e64e$var$checkKeyPressed, false);\nfunction $09e991522ca7e64e$var$checkKeyPressed(evt) {\n    if (evt.key === \"ArrowLeft\") $09e991522ca7e64e$var$game.moveLeft();\n    if (evt.key === \"ArrowRight\") $09e991522ca7e64e$var$game.moveRight();\n    if (evt.key === \"ArrowUp\") $09e991522ca7e64e$var$game.moveUp();\n    if (evt.key === \"ArrowDown\") $09e991522ca7e64e$var$game.moveDown();\n    $09e991522ca7e64e$var$game.fillCells();\n}\n\n\n//# sourceMappingURL=index.00fc37d1.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\nconst startButton = document.querySelector('.button');\nconst score = document.querySelector('.game-score');\nconst messageStart = document.querySelector(\n  '.message-container p:nth-child(3)',\n);\nconst messageWin = document.querySelector('.message-container p:nth-child(2)');\nconst messageLose = document.querySelector('.message-container p:nth-child(1)');\n\n// Write your code here\nGame.prototype.getState = function () {\n  // eslint-disable-next-line no-console\n  console.log(this.state);\n\n  return this.state;\n};\n\nGame.prototype.getScore = function () {\n  return this.score;\n};\n\nGame.prototype.getStatus = function () {\n  if (this.state === Game.prototype.initialState) {\n    return 'idle';\n  }\n\n  this.state.forEach((line) => {\n    if (line.includes(2048)) {\n      return 'win';\n    }\n  });\n\n  if (!this.canMerge() && this.getEmptyCells().length === 0) {\n    return 'lose';\n  }\n\n  return 'playing';\n};\n\nGame.prototype.moveLeft = function () {\n  let wasMerged = false;\n  const canMove = [true, true, true, true];\n\n  for (let i = 0; i < this.state.length; i++) {\n    const rowCopy = [...this.state[i]];\n    let row = this.state[i].filter((num) => num !== 0);\n\n    for (let j = 0; j < row.length - 1; j++) {\n      if (row[j] === row[j + 1]) {\n        row[j] *= 2;\n        row[j + 1] = 0;\n        this.score += row[j];\n        wasMerged = true;\n      }\n    }\n\n    row = row.filter((num) => num !== 0);\n\n    while (row.length < this.state[i].length) {\n      row.push(0);\n    }\n\n    if (row.every((value, index, array) => value === rowCopy[index])) {\n      canMove[i] = false;\n    }\n\n    this.state[i] = row;\n  }\n\n  if (wasMerged || canMove.includes(true)) {\n    this.addNumber();\n    this.getState();\n  }\n\n  this.moveUtil();\n};\n\nGame.prototype.moveRight = function () {\n  let wasMerged = false;\n  const canMove = [true, true, true, true];\n\n  for (let i = 0; i < this.state.length; i++) {\n    const rowCopy = [...this.state[i]];\n    let row = this.state[i].filter((num) => num !== 0);\n\n    for (let j = row.length - 1; j > 0; j--) {\n      if (row[j] === row[j - 1]) {\n        row[j] *= 2;\n        row[j - 1] = 0;\n        wasMerged = true;\n        this.score += row[j];\n      }\n    }\n\n    row = row.filter((num) => num !== 0);\n\n    while (row.length < this.state[i].length) {\n      row.unshift(0);\n    }\n\n    if (row.every((value, index, array) => value === rowCopy[index])) {\n      canMove[i] = false;\n    }\n\n    this.state[i] = row;\n  }\n\n  if (wasMerged || canMove.includes(true)) {\n    this.addNumber();\n    this.getState();\n  }\n\n  this.moveUtil();\n};\n\nGame.prototype.moveUp = function () {\n  let wasMerged = false;\n  const canMove = [true, true, true, true];\n\n  for (let j = 0; j < this.state.length; j++) {\n    let column = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      column.push(this.state[i][j]);\n    }\n\n    const columnCopy = [...column];\n\n    column = column.filter((num) => num !== 0);\n\n    for (let i = 0; i < column.length - 1; i++) {\n      if (column[i] === column[i + 1]) {\n        column[i] *= 2;\n        column[i + 1] = 0;\n        this.score += column[i];\n        wasMerged = true;\n      }\n    }\n\n    column = column.filter((num) => num !== 0);\n\n    while (column.length < this.state.length) {\n      column.push(0);\n    }\n\n    if (column.every((value, index, array) => value === columnCopy[index])) {\n      canMove[j] = false;\n    }\n\n    for (let i = 0; i < this.state.length; i++) {\n      this.state[i][j] = column[i];\n    }\n  }\n\n  if (wasMerged || canMove.includes(true)) {\n    this.addNumber();\n    this.getState();\n  }\n\n  this.moveUtil();\n};\n\nGame.prototype.moveDown = function () {\n  let wasMerged = false;\n  const canMove = [true, true, true, true];\n\n  for (let j = 0; j < this.state.length; j++) {\n    let column = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      column.push(this.state[i][j]);\n    }\n\n    const columnCopy = [...column];\n\n    column = column.filter((num) => num !== 0);\n\n    for (let i = column.length - 1; i > 0; i--) {\n      if (column[i] === column[i - 1]) {\n        column[i] *= 2;\n        column[i - 1] = 0;\n        wasMerged = true;\n        this.score += column[i];\n      }\n    }\n\n    column = column.filter((num) => num !== 0);\n\n    while (column.length < this.state.length) {\n      column.unshift(0);\n    }\n\n    if (column.every((value, index) => value === columnCopy[index])) {\n      canMove[j] = false;\n    }\n\n    for (let i = 0; i < this.state.length; i++) {\n      this.state[i][j] = column[i] || 0;\n    }\n  }\n\n  if (wasMerged || canMove.includes(true)) {\n    this.addNumber();\n    this.getState();\n  }\n\n  this.moveUtil();\n};\n\nGame.prototype.restart = function () {\n  this.state = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  startButton.className = 'button start';\n  startButton.innerHTML = 'Start';\n  this.score = 0;\n  score.innerHTML = this.score;\n  this.fillCells();\n\n  messageStart.className = 'message message-start';\n  messageWin.className = 'message message-win hidden';\n  messageLose.className = 'message message-lose hidden';\n};\n\nGame.prototype.getRandomNumber = function () {\n  const randomNumbersPool = [2, 2, 2, 2, 2, 2, 2, 2, 2, 4];\n  const randomNumIndex = Math.floor(Math.random() * 10);\n\n  return randomNumbersPool[randomNumIndex];\n};\n\nGame.prototype.addNumber = function () {\n  if (this.getEmptyCells().length !== 0) {\n    const emptyCellsPool = this.getEmptyCells();\n    const randomCellIndex = Math.floor(Math.random() * emptyCellsPool.length);\n    const randomEmptyCell = emptyCellsPool[randomCellIndex];\n\n    this.state[randomEmptyCell[0]][randomEmptyCell[1]] = this.getRandomNumber();\n  }\n};\n\nGame.prototype.canMerge = function () {\n  for (let i = 0; i < this.state.length; i++) {\n    for (let j = 0; j < this.state.length; j++) {\n      if (\n        j < this.state.length - 1 &&\n        this.state[i][j] === this.state[i][j + 1]\n      ) {\n        return true;\n      }\n\n      if (\n        i < this.state.length - 1 &&\n        this.state[i][j] === this.state[i + 1][j]\n      ) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nGame.prototype.getEmptyCells = function () {\n  const emptyCellsArray = [];\n\n  for (let i = 0; i < this.state.length; i++) {\n    for (let j = 0; j < this.state[i].length; j++) {\n      if (this.state[i][j] === 0) {\n        emptyCellsArray.push([i, j]);\n      }\n    }\n  }\n\n  return emptyCellsArray;\n};\n\nGame.prototype.start = function () {\n  if (this.getEmptyCells().length === this.state.length ** 2) {\n    this.addNumber();\n    this.addNumber();\n    this.fillCells();\n    this.getState();\n    messageStart.className = 'message message-start hidden';\n  }\n};\n\nGame.prototype.fillCells = function () {\n  const table = document.querySelector('.game-field');\n  const tableCells = table.querySelectorAll('.field-cell');\n\n  for (let i = 0; i < this.state.length; i++) {\n    for (let j = 0; j < this.state[i].length; j++) {\n      const cellndex = i * 4 + j;\n\n      if (this.state[i][j] === 0) {\n        tableCells[cellndex].className = 'field-cell';\n        tableCells[cellndex].innerHTML = '';\n      }\n\n      if (this.state[i][j] !== 0) {\n        tableCells[cellndex].className =\n          `field-cell field-cell--${this.state[i][j]}`;\n        tableCells[cellndex].innerHTML = this.state[i][j];\n      }\n    }\n  }\n};\n\nGame.prototype.toggleButton = function () {\n  if (this.getStatus() === 'idle') {\n    startButton.className = 'button start';\n    startButton.innerHTML = 'Start';\n  } else if (this.getEmptyCells().length !== this.state.length ** 2) {\n    startButton.className = 'button restart';\n    startButton.innerHTML = 'Restart';\n  }\n};\n\nGame.prototype.moveUtil = function () {\n  this.toggleButton();\n  this.fillCells();\n  score.innerHTML = this.score;\n\n  if (this.getStatus() === 'win') {\n    messageWin.className = 'message message-win';\n  }\n\n  if (this.getStatus() === 'lose') {\n    messageLose.className = 'message message-lose';\n  }\n};\n\nstartButton.addEventListener('click', () => {\n  if (startButton.className === 'button start') {\n    game.start();\n  }\n\n  if (startButton.className === 'button restart') {\n    game.restart();\n  }\n});\n\nwindow.addEventListener('keydown', checkKeyPressed, false);\n\nfunction checkKeyPressed(evt) {\n  if (evt.key === 'ArrowLeft') {\n    game.moveLeft();\n  }\n\n  if (evt.key === 'ArrowRight') {\n    game.moveRight();\n  }\n\n  if (evt.key === 'ArrowUp') {\n    game.moveUp();\n  }\n\n  if (evt.key === 'ArrowDown') {\n    game.moveDown();\n  }\n\n  game.fillCells();\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    // eslint-disable-next-line no-console\n    console.log(initialState);\n\n    this.state = initialState;\n    this.score = 0;\n  }\n\n  moveLeft() {}\n  moveRight() {}\n  moveUp() {}\n  moveDown() {}\n\n  /**\n   * @returns {number}\n   */\n  getScore() {}\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {}\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {}\n\n  /**\n   * Starts the game.\n   */\n  start() {}\n\n  /**\n   * Resets the game.\n   */\n  restart() {}\n\n  // Add your own methods here\n\n  getRandomNumber() {}\n  addNumber() {}\n  canMove() {}\n  getEmptyCells() {}\n  fillCells() {}\n  moveUtil() {}\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$09e991522ca7e64e$var$game","constructor","initialState","console","log","state","score","moveLeft","moveRight","moveUp","moveDown","getScore","getState","getStatus","start","restart","getRandomNumber","addNumber","canMove","getEmptyCells","fillCells","moveUtil","$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","prototype","forEach","line","includes","canMerge","length","wasMerged","i","rowCopy","row","filter","num","j","push","every","value","index","array","unshift","column","columnCopy","className","innerHTML","randomNumbersPool","Math","floor","random","emptyCellsPool","randomCellIndex","randomEmptyCell","emptyCellsArray","tableCells","table","querySelectorAll","cellndex","toggleButton","addEventListener","window","evt","key"],"version":3,"file":"index.00fc37d1.js.map"}